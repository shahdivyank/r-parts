// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

// Don't touch the above

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  cartID        String
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  roles         String[]
  orders        Order[]
  address       Address[]
  listItem      ListItem[]
  supportRequest SupportRequest[]
  trackID       String?
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Cart {
  id        String      @id @default(cuid())
  userId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  cartItems CartItems[]
}

model Item {
  id            String        @id @default(cuid())
  name          String
  description   String
  images        String[]
  cartItems     CartItems[]
  orderItems    OrderItems[]
  listItem      ListItem[]
  inventoryID   String
  length        Float
  width         Float
  height        Float
  weight        Float
  manufacturer  String
  country       String
  modelNumber   String
  inventoryItem InventoryItem @relation(fields: [inventoryID], references: [id])
}

model InventoryItem {
  id            String   @id @default(cuid())
  quantity      Int
  price         Float
  dateAvailable DateTime
  condition     String
  items         Item[]
}

model CartItems {
  cartId   String
  cart     Cart   @relation(fields: [cartId], references: [id])
  item     Item   @relation(fields: [itemId], references: [id])
  itemId   String
  quantity Int

  @@id([cartId, itemId])
}

model ListItem {
  id        String   @id @default(cuid())
  userId    String
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id            String       @id @default(cuid())
  userId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  status        String
  orderItems    OrderItems[]
  transactionID String
  transaction   transaction?
}

model OrderItems {
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
  item     Item   @relation(fields: [itemId], references: [id])
  itemId   String
  quantity Int

  @@id([orderId, itemId])
}

model transaction {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    Float
  status    String
  orderID   String   @unique
  order     Order?   @relation(fields: [orderID], references: [id])
}

model Address {
  id      String @id @default(cuid())
  userId  String
  street  String
  city    String
  state   String
  zip     String
  country String
  user    User   @relation(fields: [userId], references: [id])
}
model SupportRequest{
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  message   String
  status    String
  user      User     @relation(fields: [userId], references: [id])
}